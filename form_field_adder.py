#!/usr/bin/env python3
"""
Form Field Adder - Add real PDF form fields to the gorgeous clean template
This creates proper text boxes and checkboxes where data should go
"""

import fitz  # pymupdf
import os

class FormFieldAdder:
    def __init__(self):
        self.clean_template_path = "output/CRPA_CLEAN_TEMPLATE.pdf"
        
    def add_form_fields_to_template(self, output_path="output/CRPA_TEMPLATE_WITH_FIELDS.pdf"):
        """Add real PDF form fields to the clean template"""
        print("üìù ADDING FORM FIELDS TO CLEAN TEMPLATE")
        print("=" * 60)
        
        # Open the gorgeous clean template
        doc = fitz.open(self.clean_template_path)
        
        # Page 3 (index 2) is the main purchase agreement form
        page = doc[2]
        
        print("Adding form fields to main purchase agreement page...")
        
        # Based on where I removed colored text, add form fields at those exact locations
        
        # 1. Date Prepared field
        date_rect = fitz.Rect(500, 135, 580, 150)
        date_widget = fitz.Widget()
        date_widget.field_name = "date_prepared"
        date_widget.field_type = fitz.PDF_WIDGET_TYPE_TEXT
        date_widget.rect = date_rect
        date_widget.border_color = (0, 0, 0)
        date_widget.border_width = 1
        page.add_widget(date_widget)
        
        # 2. Buyer Name field
        buyer_rect = fitz.Rect(280, 163, 500, 178)
        buyer_widget = fitz.Widget()
        buyer_widget.field_name = "buyer_name"
        buyer_widget.field_type = fitz.PDF_WIDGET_TYPE_TEXT
        buyer_widget.rect = buyer_rect
        buyer_widget.border_color = (0, 0, 0)
        buyer_widget.border_width = 1
        page.add_widget(buyer_widget)
        
        # 3. Property Address field
        address_rect = fitz.Rect(280, 188, 500, 203)
        address_widget = fitz.Widget()
        address_widget.field_name = "property_address"
        address_widget.field_type = fitz.PDF_WIDGET_TYPE_TEXT
        address_widget.rect = address_rect
        address_widget.border_color = (0, 0, 0)
        address_widget.border_width = 1
        page.add_widget(address_widget)
        
        # 4. City field
        city_rect = fitz.Rect(180, 213, 300, 228)
        city_widget = fitz.Widget()
        city_widget.field_name = "city"
        city_widget.field_type = fitz.PDF_WIDGET_TYPE_TEXT
        city_widget.rect = city_rect
        city_widget.border_color = (0, 0, 0)
        city_widget.border_width = 1
        page.add_widget(city_widget)
        
        # 5. State field
        state_rect = fitz.Rect(350, 213, 380, 228)
        state_widget = fitz.Widget()
        state_widget.field_name = "state"
        state_widget.field_type = fitz.PDF_WIDGET_TYPE_TEXT
        state_widget.rect = state_rect
        state_widget.border_color = (0, 0, 0)
        state_widget.border_width = 1
        page.add_widget(state_widget)
        
        # 6. ZIP field
        zip_rect = fitz.Rect(450, 213, 500, 228)
        zip_widget = fitz.Widget()
        zip_widget.field_name = "zip_code"
        zip_widget.field_type = fitz.PDF_WIDGET_TYPE_TEXT
        zip_widget.rect = zip_rect
        zip_widget.border_color = (0, 0, 0)
        zip_widget.border_width = 1
        page.add_widget(zip_widget)
        
        # 7. Purchase Price field (need to find the right location)
        price_rect = fitz.Rect(200, 275, 320, 290)
        price_widget = fitz.Widget()
        price_widget.field_name = "purchase_price"
        price_widget.field_type = fitz.PDF_WIDGET_TYPE_TEXT
        price_widget.rect = price_rect
        price_widget.border_color = (0, 0, 0)
        price_widget.border_width = 1
        page.add_widget(price_widget)
        
        # 8. Earnest Money field
        earnest_rect = fitz.Rect(150, 315, 250, 330)
        earnest_widget = fitz.Widget()
        earnest_widget.field_name = "earnest_money"
        earnest_widget.field_type = fitz.PDF_WIDGET_TYPE_TEXT
        earnest_widget.rect = earnest_rect
        earnest_widget.border_color = (0, 0, 0)
        earnest_widget.border_width = 1
        page.add_widget(earnest_widget)
        
        # 9. Sample checkbox field (for contingencies)
        checkbox_rect = fitz.Rect(100, 400, 115, 415)
        checkbox_widget = fitz.Widget()
        checkbox_widget.field_name = "inspection_contingency"
        checkbox_widget.field_type = fitz.PDF_WIDGET_TYPE_CHECKBOX
        checkbox_widget.rect = checkbox_rect
        checkbox_widget.border_color = (0, 0, 0)
        checkbox_widget.border_width = 1
        page.add_widget(checkbox_widget)
        
        print("Added form fields:")
        print("  ‚úì Date Prepared")
        print("  ‚úì Buyer Name")
        print("  ‚úì Property Address")  
        print("  ‚úì City")
        print("  ‚úì State")
        print("  ‚úì ZIP Code")
        print("  ‚úì Purchase Price")
        print("  ‚úì Earnest Money")
        print("  ‚úì Sample Checkbox")
        
        # Save the template with form fields
        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        doc.save(output_path)
        doc.close()
        
        if os.path.exists(output_path):
            file_size = os.path.getsize(output_path)
            print(f"\n‚úÖ TEMPLATE WITH FORM FIELDS CREATED!")
            print(f"üìÅ File: {output_path}")
            print(f"üìä Size: {file_size:,} bytes")
            print(f"üåê Windows path: \\\\wsl.localhost\\Ubuntu\\home\\ender\\.claude\\projects\\offer-creator\\{output_path}")
            print(f"üìù Now has real form fields that can be filled precisely!")
            
            return output_path
        else:
            print("‚ùå Failed to create template with form fields")
            return None
    
    def test_field_population(self, template_with_fields_path):
        """Test populating the form using field names instead of coordinates"""
        print(f"\nüß™ TESTING FIELD-BASED POPULATION")
        print("=" * 50)
        
        # Open the template with fields
        doc = fitz.open(template_with_fields_path)
        
        # Sample data
        test_data = {
            'date_prepared': '2025-06-01',
            'buyer_name': 'John & Jane Smith',
            'property_address': '1234 Dream Avenue',
            'city': 'Beverly Hills',
            'state': 'CA',
            'zip_code': '90210',
            'purchase_price': '$2,500,000.00',
            'earnest_money': '$50,000.00',
            'inspection_contingency': True
        }
        
        # Populate fields by name
        for page_num in range(len(doc)):
            page = doc[page_num]
            widgets = list(page.widgets())
            
            for widget in widgets:
                field_name = widget.field_name
                if field_name in test_data:
                    value = test_data[field_name]
                    
                    if widget.field_type == fitz.PDF_WIDGET_TYPE_TEXT:
                        widget.field_value = str(value)
                        print(f"  Set {field_name}: {value}")
                    elif widget.field_type == fitz.PDF_WIDGET_TYPE_CHECKBOX:
                        widget.field_value = value
                        print(f"  Set {field_name}: {'Checked' if value else 'Unchecked'}")
                    
                    widget.update()
        
        # Save populated test
        test_output = "output/CRPA_FIELD_BASED_TEST.pdf"
        doc.save(test_output)
        doc.close()
        
        if os.path.exists(test_output):
            file_size = os.path.getsize(test_output)
            print(f"\n‚úÖ FIELD-BASED POPULATION TEST COMPLETE!")
            print(f"üìÅ File: {test_output}")
            print(f"üìä Size: {file_size:,} bytes")
            print(f"üåê Windows path: \\\\wsl.localhost\\Ubuntu\\home\\ender\\.claude\\projects\\offer-creator\\{test_output}")
            print(f"üéØ NO MORE NEWSPAPER OVERLAP - Data goes exactly where it should!")
            
            return test_output
        else:
            print("‚ùå Field-based population test failed")
            return None

def main():
    """Create template with form fields and test population"""
    adder = FormFieldAdder()
    
    print("üèóÔ∏è FORM FIELD ADDITION SYSTEM")
    print("Creating proper form fields in your gorgeous clean template...")
    print("=" * 80)
    
    # Add form fields to clean template
    template_with_fields = adder.add_form_fields_to_template()
    
    if template_with_fields:
        # Test field-based population
        test_result = adder.test_field_population(template_with_fields)
        
        if test_result:
            print(f"\nüéâ SUCCESS!")
            print(f"‚úÖ Clean template now has proper form fields")
            print(f"‚úÖ Field-based population works perfectly")
            print(f"‚úÖ No more coordinate guessing or newspaper overlap")
            print(f"‚úÖ Ready for CRM integration!")

if __name__ == "__main__":
    main()