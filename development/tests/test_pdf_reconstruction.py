#!/usr/bin/env python3
"""
Test PDF Reconstruction - Demo and test the reconstruction capabilities
"""

import os
import sys
from advanced_pdf_reconstructor import AdvancedPDFReconstructor


def test_reconstruction():
    """Test the PDF reconstruction with available PDFs"""
    reconstructor = AdvancedPDFReconstructor()
    
    print("üß™ Testing PDF Reconstruction")
    print("=" * 50)
    
    # Find available PDFs to test with
    test_pdfs = []
    current_dir = "."
    
    for file in os.listdir(current_dir):
        if file.endswith('.pdf') and not file.startswith('output') and not file.startswith('reconstructed'):
            test_pdfs.append(file)
    
    if not test_pdfs:
        print("‚ùå No PDF files found for testing")
        return
    
    print(f"üìã Found {len(test_pdfs)} PDFs to test:")
    for pdf in test_pdfs[:5]:  # Test first 5
        print(f"  - {pdf}")
    
    print("\nüîÑ Testing reconstruction strategies...")
    
    # Test with the first available PDF
    test_pdf = test_pdfs[0]
    print(f"\nüìÑ Testing with: {test_pdf}")
    
    strategies = ["template_based", "text_analysis", "complete_rebuild"]
    
    for strategy in strategies:
        try:
            print(f"\nüéØ Testing {strategy} strategy...")
            result = reconstructor.reconstruct_from_flattened(test_pdf, strategy)
            
            if result:
                print(f"‚úÖ Success: {os.path.basename(result)}")
                
                # Check if file was created and has size > 0
                if os.path.exists(result) and os.path.getsize(result) > 0:
                    print(f"   File size: {os.path.getsize(result):,} bytes")
                else:
                    print("   ‚ö†Ô∏è  File created but appears empty")
            else:
                print(f"‚ùå Failed: {strategy}")
                
        except Exception as e:
            print(f"‚ùå Error in {strategy}: {e}")
    
    print("\n" + "=" * 50)
    print("üéâ Test complete! Check 'reconstructed_forms/' directory for outputs")


def demo_field_template():
    """Demo creating a fillable template from scratch"""
    reconstructor = AdvancedPDFReconstructor()
    
    print("\nüé® Creating demo fillable template...")
    
    # Create a simple demo template
    from reportlab.pdfgen import canvas
    from reportlab.lib.pagesizes import letter
    import io
    
    demo_path = os.path.join(reconstructor.output_dir, "DEMO_FILLABLE_FORM.pdf")
    
    # Create a demo form
    can = canvas.Canvas(demo_path, pagesize=letter)
    width, height = letter
    
    # Add title
    can.setFont("Helvetica-Bold", 18)
    can.drawString(50, height - 50, "DEMO: Reconstructed Real Estate Form")
    
    # Add some instructional text
    can.setFont("Helvetica", 12)
    can.drawString(50, height - 100, "This demonstrates PDF field reconstruction capabilities:")
    can.drawString(50, height - 120, "‚Ä¢ Form fields can be added to any flattened PDF")
    can.drawString(50, height - 140, "‚Ä¢ Multiple reconstruction strategies available")
    can.drawString(50, height - 160, "‚Ä¢ Compatible with ZipForm Plus downloads")
    
    # Add fillable fields
    y_pos = height - 220
    fields = [
        ("buyer_name", "Buyer Name:", 200),
        ("property_address", "Property Address:", 300),
        ("offer_price", "Offer Price:", 150),
        ("earnest_money", "Earnest Money:", 150),
        ("close_date", "Close Date:", 100),
    ]
    
    for field_name, label, field_width in fields:
        # Add label
        can.setFont("Helvetica", 10)
        can.drawString(50, y_pos + 5, label)
        
        # Add form field
        can.acroForm.textfield(
            name=field_name,
            x=200, y=y_pos, width=field_width, height=20,
            borderColor=None,
            fillColor=None,
            textColor=None,
            forceBorder=True,
            fontSize=10
        )
        
        y_pos -= 40
    
    # Add checkboxes
    y_pos -= 20
    can.drawString(50, y_pos + 5, "Property Features:")
    
    checkbox_options = ["Has Well Water", "Has Septic System", "Seller Pays Broker"]
    for i, option in enumerate(checkbox_options):
        checkbox_y = y_pos - (i * 25)
        
        can.acroForm.checkbox(
            name=f"checkbox_{i}",
            x=70, y=checkbox_y, size=15,
            borderColor=None,
            fillColor=None,
            textColor=None,
            forceBorder=True
        )
        
        can.setFont("Helvetica", 10)
        can.drawString(95, checkbox_y + 2, option)
    
    # Add footer
    can.setFont("Helvetica-Oblique", 8)
    can.drawString(50, 50, "Generated by Advanced PDF Reconstructor - Ready for form data import")
    
    can.save()
    
    print(f"‚úÖ Demo fillable form created: {demo_path}")
    return demo_path


if __name__ == "__main__":
    print("üöÄ PDF Reconstruction Test Suite")
    print("This will test reconstruction of flattened PDFs into fillable forms")
    print()
    
    # Create demo template first
    demo_field_template()
    
    # Run reconstruction tests
    test_reconstruction()
    
    print("\nüìÅ Check the 'reconstructed_forms/' directory for all outputs")
    print("üí° You can now import data into these fillable PDFs using your existing CSV system!")